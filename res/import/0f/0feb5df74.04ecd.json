[{"__type__":"cc.Material","_name":"TestMaterial","_effectAsset":{"__uuid__":"5fygOmz2lGAZ8048SK0wKA"},"_techniqueData":{"0":{"defines":{"USE_TEXTURE":true},"props":{"normalMap":{"__uuid__":"9aAKd9vuNFtYMjM2+1R8l5"},"waterWave":{"__uuid__":"44AO4oRNRHqqbhXrnABrZS"},"normalMap2":{"__uuid__":"9aAKd9vuNFtYMjM2+1R8l5"}}}}},{"__type__":"cc.SpriteFrame","content":{"name":"Background_03_Dif","texture":"67eulqi3BOZoGhnbLD0IlK","rect":[0,0,1400,792],"offset":[0,0],"originalSize":[1400,792],"capInsets":[0,0,0,0]}},{"__type__":"cc.EffectAsset","_name":"TestEffect","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"normalMap":{"value":"white","type":29},"normalMap2":{"value":"white","type":29},"waterWave":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13}},"program":"TestEffect|vs|fs"}]}],"shaders":[{"hash":2538770403,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D normalMap;\nuniform sampler2D normalMap2;\nuniform sampler2D waterWave;\n#endif\nvec3 waveNormal(sampler2D map, vec2 p) {\n  float x = mod(p.x , 2.0) < 1.0 ? fract(p.x) : 1.0 - fract(p.x);\n  float y = mod(p.y , 2.0) < 1.0 ? fract(p.y) : 1.0 - fract(p.y);\n  vec3 normal = texture2D(map, vec2(x , y)).xyz;\n  normal = -1.0 + normal * 2.0;\n  normal.x *= 0.1;\n  normal.y *= 0.1;\n  return normalize(normal);\n}\nvec4 waveNormal2(sampler2D map, vec2 p) {\n  float x = mod(p.x , 2.0) < 1.0 ? fract(p.x) : 1.0 - fract(p.x);\n  float y = mod(p.y , 2.0) < 1.0 ? fract(p.y) : 1.0 - fract(p.y);\n  vec4 color = texture2D(map, vec2(x , y));\n  color.gb +=0.1;\n  return color;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float refractionFactor = 0.7;\n  float offsetFactor = 0.5;\n  vec3 normal = waveNormal(normalMap, v_uv0 + vec2(cc_time.x * 0.05, cc_time.x * 0.02));\n  vec2 p = -1.0 + 2.0 * v_uv0;\n  vec3 eyePos = vec3(0, 0, 10);\n  vec3 inVec = normalize(vec3(p, 0) - eyePos);\n  vec3 refractVec = refract(inVec, normal, 0.9);\n  vec2 v_uv0N = v_uv0;\n  v_uv0N += refractVec.xy * 0.3;\n  o = texture2D(texture, v_uv0N);\n  normal = waveNormal(normalMap2, v_uv0 + vec2(cc_time.x * 0.05, cc_time.x * 0.02));\n  refractVec = refract(inVec, normal, refractionFactor);\n  v_uv0N += refractVec.xy;\n  o += waveNormal2(waterWave, v_uv0N + vec2(cc_time.x * 0.05, cc_time.x * -0.02));\n  o *= 0.9;\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D normalMap;\nuniform sampler2D normalMap2;\nuniform sampler2D waterWave;\n#endif\nvec3 waveNormal(sampler2D map, vec2 p) {\n  float x = mod(p.x , 2.0) < 1.0 ? fract(p.x) : 1.0 - fract(p.x);\n  float y = mod(p.y , 2.0) < 1.0 ? fract(p.y) : 1.0 - fract(p.y);\n  vec3 normal = texture2D(map, vec2(x , y)).xyz;\n  normal = -1.0 + normal * 2.0;\n  normal.x *= 0.1;\n  normal.y *= 0.1;\n  return normalize(normal);\n}\nvec4 waveNormal2(sampler2D map, vec2 p) {\n  float x = mod(p.x , 2.0) < 1.0 ? fract(p.x) : 1.0 - fract(p.x);\n  float y = mod(p.y , 2.0) < 1.0 ? fract(p.y) : 1.0 - fract(p.y);\n  vec4 color = texture2D(map, vec2(x , y));\n  color.gb +=0.1;\n  return color;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float refractionFactor = 0.7;\n  float offsetFactor = 0.5;\n  vec3 normal = waveNormal(normalMap, v_uv0 + vec2(cc_time.x * 0.05, cc_time.x * 0.02));\n  vec2 p = -1.0 + 2.0 * v_uv0;\n  vec3 eyePos = vec3(0, 0, 10);\n  vec3 inVec = normalize(vec3(p, 0) - eyePos);\n  vec3 refractVec = refract(inVec, normal, 0.9);\n  vec2 v_uv0N = v_uv0;\n  v_uv0N += refractVec.xy * 0.3;\n  o = texture2D(texture, v_uv0N);\n  normal = waveNormal(normalMap2, v_uv0 + vec2(cc_time.x * 0.05, cc_time.x * 0.02));\n  refractVec = refract(inVec, normal, refractionFactor);\n  v_uv0N += refractVec.xy;\n  o += waveNormal2(waterWave, v_uv0N + vec2(cc_time.x * 0.05, cc_time.x * -0.02));\n  o *= 0.9;\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30},{"name":"normalMap","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":31},{"name":"normalMap2","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":32},{"name":"waterWave","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":33}],"record":null,"name":"TestEffect|vs|fs"}]},[{"__type__":"cc.SceneAsset","_name":"TestScene","scene":{"__id__":1},"asyncLoadAssets":null},{"__type__":"cc.Scene","_name":"New Node","_children":[{"__id__":2}],"_anchorPoint":{"__type__":"cc.Vec2"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"autoReleaseAssets":false},{"__type__":"cc.Node","_name":"Canvas","_parent":{"__id__":1},"_children":[{"__id__":3},{"__id__":4}],"_components":[{"__type__":"cc.Canvas","node":{"__id__":2},"_designResolution":{"__type__":"cc.Size","width":960,"height":580}},{"__type__":"cc.Widget","node":{"__id__":2},"_alignFlags":45}],"_contentSize":{"__type__":"cc.Size","width":960,"height":580},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[480,290,0,0,0,0,1,1,1,1]},"_id":"a5esZu+45LA5mBpvttspPD"},{"__type__":"cc.Node","_name":"Main Camera","_parent":{"__id__":2},"_components":[{"__type__":"cc.Camera","node":{"__id__":3},"_clearFlags":7,"_depth":-1}],"_contentSize":{"__type__":"cc.Size","width":960,"height":640},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,388.0905649429013,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"cocos_logo","_parent":{"__id__":2},"_components":[{"__type__":"cc.Sprite","node":{"__id__":4},"_materials":[{"__uuid__":"0fbkX4czZBWIfYpjw9kCvB"}],"_spriteFrame":{"__uuid__":"50L8Swuk9LeZqwyWSWRMAD"}}],"_contentSize":{"__type__":"cc.Size","width":1400,"height":792},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,0.8,0.8,1]}}]]